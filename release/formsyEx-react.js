!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("react"),require("underscore")):"function"==typeof define&&define.amd?define(["react","underscore"],r):"object"==typeof exports?exports.FormsyEx=r(require("react"),require("underscore")):t.FormsyEx=r(t.react,t.underscore)}(this,function(t,r){return function(t){function r(s){if(e[s])return e[s].exports;var i=e[s]={exports:{},id:s,loaded:!1};return t[s].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}var e={};return r.m=t,r.c=e,r.p="",r(0)}([function(t,r,e){(function(r){"use strict";var s={},i=e(6),o=e(5),n=e(2);s.Mixin=n,s.Form=i,s.Block=o,r.exports||r.module||r.define&&r.define.amd||(r.FormsyEx=s),t.exports=s}).call(r,function(){return this}())},function(r,e){r.exports=t},function(t,r,e){(function(r){"use strict";var s=r.React||e(1),i=e(4),o={},n=e(3),u="_DEFAULT_FORM";t.exports={focus:function(){s.findDOMNode(this.refs.focus)&&s.findDOMNode(this.refs.focus).focus()},getInitialState:function(){return{_formsyExValue:"",_formsyExErrorMsgs:[]}},componentWillMount:function(){var t=this;if(t.isInit===!0)return void 0;if(t.isForm){var r=t.props.name?t.props.name:u;o[r]&&(t.inputs=o[r].inputs,t.childId=o[r].childId),o[r]=t,s.Children.forEach(t.children,function(e){return void 0!==e.props.regForm&&e.props.regForm!==r?void 0:(t.register(e),void(e.isInit=!0))})}else{var e;e=t.props.regForm?t.props.regForm:u,void 0===o[e]&&(o[e]=n()),o[e].register(t)}t.isInit=!0},componentWillUnmount:function(){var t=this;if(!t.isInit)return void 0;if(t.isForm){var r=t.props.name?t.props.name:u;delete o[r],t.isInit=!1}else{var e=t.props.regForm?t.props.regForm:u;o[e]?o[e].unregister(t):void 0}},validate:function(t){var r,e,s=void 0!==t?t:this.state._formValue,o=this.getValidators(),n=!0;return o&&(r=i.map(o,function(t){return n===!1?"":(e=t(s)||{},e["continue"]===!1&&(n=!1),e.res===!1?e.msg:"")})),r=i.filter(r,function(t){return!0&&t}),this.setState({_formValue:s,_formsyExErrorMsgs:r}),0===r.length},getValue:function(){return this.state._formValue},getErrorMsg:function(){return 1===this.state._formsyExErrorMsgs.length?this.state._formsyExErrorMsgs[0]:this.state._formsyExErrorMsgs},getValidators:function(){var t=this.validators&&this.validators.call?[this.validators]:this.validators||[],r=t.concat(this.props.validators||[]);return r}}}).call(r,function(){return this}())},function(t,r,e){(function(r){"use strict";var s=r.React||e(1),i=e(4);t.exports=function(){return{isForm:!0,register:function(t){this.inputs=this.inputs||{},this.childId=this.childId||0,t.regId=t.props.name||this.childId++,this.inputs[t.regId]=t},unregister:function(t){delete this.inputs[t.regId]},submit:function(t){t.stopPropagation()||t.preventDefault();var r=void 0;i.each(this.inputs,function(t){var e=t.validate();r=void 0===r&&e===!1?t:r}),void 0===r?this.props.onSubmit.apply(this,arguments):r.focus&&r.focus()},render:function(){return s.createElement("form",{onSubmit:this.submit,style:this.props.style,className:this.props.className},this.props.children)}}}}).call(r,function(){return this}())},function(t,e){t.exports=r},function(t,r,e){(function(r){"use strict";var s=r.React||e(1);t.exports=s.createClass({displayName:"module.exports",mixins:[e(2)],render:function(){var t=this.getErrorMsg();return s.createElement("div",{style:this.props.style},this.props.children,s.createElement("label",{style:{color:"red"}},t,s.createElement("input",{ref:"focus",style:{opacity:"0"}})))}})}).call(r,function(){return this}())},function(t,r,e){(function(r){"use strict";var s=r.React||e(1),i=e(3)();i.mixins=[e(2)],t.exports=s.createClass(i)}).call(r,function(){return this}())}])});
//# sourceMappingURL=data:application/json;base64,