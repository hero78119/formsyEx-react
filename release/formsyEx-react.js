!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("react"),require("underscore")):"function"==typeof define&&define.amd?define(["react","underscore"],r):"object"==typeof exports?exports.FormsyEx=r(require("react"),require("underscore")):t.FormsyEx=r(t.react,t.underscore)}(this,function(t,r){return function(t){function r(s){if(e[s])return e[s].exports;var i=e[s]={exports:{},id:s,loaded:!1};return t[s].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}var e={};return r.m=t,r.c=e,r.p="",r(0)}([function(t,r,e){(function(r){"use strict";var s={},i=e(6),o=e(5),n=e(2);s.Mixin=n,s.Form=i,s.Block=o,r.exports||r.module||r.define&&r.define.amd||(r.FormsyEx=s),t.exports=s}).call(r,function(){return this}())},function(r,e){r.exports=t},function(t,r,e){(function(r){"use strict";var s=r.React||e(1),i=e(4),o={},n=e(3),u="_DEFAULT_FORM";t.exports={focus:function(){s.findDOMNode(this.refs.focus)&&s.findDOMNode(this.refs.focus).focus()},getInitialState:function(){return{_formsyExValue:"",_formsyExErrorMsgs:[]}},componentWillMount:function(){var t=this;if(t.isInit===!0)return void 0;if(t.isForm){var r=t.props.name?t.props.name:u;o[r]&&(t.inputs=o[r].inputs,t.childId=o[r].childId),o[r]=t,s.Children.forEach(t.children,function(e){return void 0!==e.props.regForm&&e.props.regForm!==r?void 0:(t.register(e),void(e.isInit=!0))})}else{var e;e=t.props.regForm?t.props.regForm:u,void 0===o[e]&&(o[e]=n()),o[e].register(t)}t.isInit=!0},componentWillUnmount:function(){var t=this;if(!t.isInit)return void 0;if(t.isForm){var r=t.props.name?t.props.name:u;delete o[r],t.isInit=!1}else{var e=t.props.regForm?t.props.regForm:u;o[e]?o[e].unregister(t):void 0}},validate:function(t){var r,e,s=void 0!==t?t:this.state._formValue,o=this.getValidators(),n=!0;return o&&(r=i.map(o,function(t){return n===!1?"":(e=t(s)||{},e["continue"]===!1&&(n=!1),e.res===!1?e.msg:"")})),r=i.filter(r,function(t){return!0&&t}),this.setState({_formValue:s,_formsyExErrorMsgs:r}),0===r.length},getValue:function(){return this.state._formValue},getErrorMsg:function(){return 1===this.state._formsyExErrorMsgs.length?this.state._formsyExErrorMsgs[0]:this.state._formsyExErrorMsgs},getValidators:function(){var t=this.validators&&this.validators.call?[this.validators]:this.validators||[],r=t.concat(this.props.validators||[]);return r}}}).call(r,function(){return this}())},function(t,r,e){(function(r){"use strict";var s=r.React||e(1),i=e(4);t.exports=function(){return{isForm:!0,register:function(t){this.inputs=this.inputs||{},this.childId=this.childId||0,t.regId=t.props.name||this.childId++,this.inputs[t.regId]=t},unregister:function(t){delete this.inputs[t.regId]},submit:function(t){t.stopPropagation()||t.preventDefault();var r=void 0;i.each(this.inputs,function(t){var e=t.validate();r=void 0===r&&e===!1?t:r}),void 0===r?this.props.onSubmit.apply(this,arguments):r.focus&&r.focus()},render:function(){return s.createElement("form",{onSubmit:this.submit,style:this.props.style,className:this.props.className},this.props.children)}}}}).call(r,function(){return this}())},function(t,e){t.exports=r},function(t,r,e){(function(r){"use strict";var s=r.React||e(1);t.exports=s.createClass({displayName:"module.exports",mixins:[e(2)],render:function(){var t=this.getErrorMsg();return s.createElement("div",{style:this.props.style},this.props.children,s.createElement("label",{style:{color:"red"}},t,s.createElement("input",{ref:"focus",style:{opacity:"0"}})))}})}).call(r,function(){return this}())},function(t,r,e){(function(r){"use strict";var s=r.React||e(1),i=e(3)();i.mixins=[e(2)],t.exports=s.createClass(i)}).call(r,function(){return this}())}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9mb3Jtc3lFeC1yZWFjdC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMGM5OThjODUyYTQyZTBhMmNlMmYiLCJ3ZWJwYWNrOi8vLy4vbGliL21haW4uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9saWIvTWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vbGliL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwidW5kZXJzY29yZVwiIiwid2VicGFjazovLy8uL2xpYi9CbG9jay5qc3giLCJ3ZWJwYWNrOi8vLy4vbGliL0Zvcm0uanN4Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzRfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiZ2xvYmFsIiwiRm9ybXN5RXgiLCJGb3JtIiwiQmxvY2siLCJNaXhpbiIsIlJlYWN0IiwiXyIsInJlZ0Zvcm1zIiwibW9ja0Zvcm0iLCJkZWZhdWx0Rm9ybSIsImZvY3VzIiwiZmluZERPTU5vZGUiLCJyZWZzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiX2Zvcm1zeUV4VmFsdWUiLCJfZm9ybXN5RXhFcnJvck1zZ3MiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnQiLCJpc0luaXQiLCJ1bmRlZmluZWQiLCJpc0Zvcm0iLCJmb3JtTmFtZSIsInByb3BzIiwibmFtZSIsImlucHV0cyIsImNoaWxkSWQiLCJDaGlsZHJlbiIsImZvckVhY2giLCJjaGlsZHJlbiIsImNoaWxkIiwicmVnRm9ybSIsInJlZ2lzdGVyIiwicmVnVG9Gb3JtTmFtZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidW5yZWdpc3RlciIsInZhbGlkYXRlIiwidmFsdWUiLCJmb3Jtc3lFeEVycm9yTXNncyIsInJlcyIsIl92YWx1ZSIsInN0YXRlIiwiX2Zvcm1WYWx1ZSIsInZhbGlkYXRvcnMiLCJnZXRWYWxpZGF0b3JzIiwiaXNDb250aW51ZSIsIm1hcCIsInZhbGlkYXRvciIsIm1zZyIsImZpbHRlciIsImZvcm1zeUV4RXJyb3JNc2ciLCJzZXRTdGF0ZSIsImxlbmd0aCIsImdldFZhbHVlIiwiZ2V0RXJyb3JNc2ciLCJwcm9wZXJ0eVZhbGlkYXRvciIsImNvbmNhdCIsInJlZ0lkIiwic3VibWl0IiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImZpcnN0RXJyb3JDb21wb25lbnQiLCJlYWNoIiwib25TdWJtaXQiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImNsYXNzTmFtZSIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJtaXhpbnMiLCJlcnJvck1zZyIsImNvbG9yIiwicmVmIiwib3BhY2l0eSIsImZvcm0iXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsZ0JBQUFDLFVBQUEsZ0JBQUFDLFFBQ0FBLE9BQUFELFFBQUFELEVBQUFHLFFBQUEsU0FBQUEsUUFBQSxlQUNBLGtCQUFBQyxnQkFBQUMsSUFDQUQsUUFBQSxzQkFBQUosR0FDQSxnQkFBQUMsU0FDQUEsUUFBQSxTQUFBRCxFQUFBRyxRQUFBLFNBQUFBLFFBQUEsZUFFQUosRUFBQSxTQUFBQyxFQUFBRCxFQUFBLE1BQUFBLEVBQUEsYUFDQ08sS0FBQSxTQUFBQyxFQUFBQyxHQUNELE1DQWdCLFVBQVVDLEdDTjFCLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFB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bkJzRixHQUFhLFFBQUt0RixFQUFRLElBQzFCUixFQUFPRCxRQUFVdUIsRUFBTWlFLFlBQVlPLEtSMlFMakYsS0FBS2QsRUFBVSxXQUFhLE1BQU9LIiwiZmlsZSI6ImZvcm1zeUV4LXJlYWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwidW5kZXJzY29yZVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJGb3Jtc3lFeFwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwidW5kZXJzY29yZVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiRm9ybXN5RXhcIl0gPSBmYWN0b3J5KHJvb3RbXCJyZWFjdFwiXSwgcm9vdFtcInVuZGVyc2NvcmVcIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fKSB7XG5yZXR1cm4gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uXG4gKiovIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIiksIHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwidW5kZXJzY29yZVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJGb3Jtc3lFeFwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwidW5kZXJzY29yZVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiRm9ybXN5RXhcIl0gPSBmYWN0b3J5KHJvb3RbXCJyZWFjdFwiXSwgcm9vdFtcInVuZGVyc2NvcmVcIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIEZvcm1zeUV4ID0ge30sXG5cdCAgICBGb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KSxcblx0ICAgIEJsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSxcblx0ICAgIE1peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdEZvcm1zeUV4Lk1peGluID0gTWl4aW47XG5cdEZvcm1zeUV4LkZvcm0gPSBGb3JtO1xuXHRGb3Jtc3lFeC5CbG9jayA9IEJsb2NrO1xuXHRcblx0aWYgKCFnbG9iYWwuZXhwb3J0cyAmJiAhZ2xvYmFsLm1vZHVsZSAmJiAoIWdsb2JhbC5kZWZpbmUgfHwgIWdsb2JhbC5kZWZpbmUuYW1kKSkge1xuXHQgICAgZ2xvYmFsLkZvcm1zeUV4ID0gRm9ybXN5RXg7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRm9ybXN5RXg7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX187XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIFJlYWN0ID0gZ2xvYmFsLlJlYWN0IHx8IF9fd2VicGFja19yZXF1aXJlX18oMSksXG5cdCAgICBfID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KSxcblx0ICAgIHJlZ0Zvcm1zID0ge30sXG5cdCAgICBtb2NrRm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oMyksXG5cdCAgICBkZWZhdWx0Rm9ybSA9ICdfREVGQVVMVF9GT1JNJztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHQgICAgICAgIC8vIGlmICghdGhpcy5yZWZzLmZvY3VzKSB7XG5cdCAgICAgICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKCdzaG91bGQgaGF2ZSBhIGNoaWxkIGNvbXBvbmVudCB3aXRoIHJlZiBuYW1lIGBpbnB1dGAsIG1vc3Qgb2YgdGhlIGNhc2UgcmVmIGlzIHNldCBvbiBFcnJvck1zZ0xhYmVsJyk7XG5cdCAgICAgICAgLy8gfVxuXHQgICAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5mb2N1cykgJiYgUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmZvY3VzKS5mb2N1cygpO1xuXHQgICAgfSxcblx0ICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIF9mb3Jtc3lFeFZhbHVlOiAnJyxcblx0ICAgICAgICAgICAgX2Zvcm1zeUV4RXJyb3JNc2dzOiBbXVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHQgICAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG5cdCAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXM7XG5cdCAgICAgICAgaWYgKGNvbXBvbmVudC5pc0luaXQgPT09IHRydWUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGNvbXBvbmVudC5pc0Zvcm0pIHtcblx0ICAgICAgICAgICAgLy8gZm9ybVxuXHQgICAgICAgICAgICAvLyBmb3JtIG9iamVjdFxuXHQgICAgICAgICAgICB2YXIgZm9ybU5hbWUgPSBjb21wb25lbnQucHJvcHMubmFtZSA/IGNvbXBvbmVudC5wcm9wcy5uYW1lIDogZGVmYXVsdEZvcm07XG5cdCAgICAgICAgICAgIGlmIChyZWdGb3Jtc1tmb3JtTmFtZV0pIHtcblx0ICAgICAgICAgICAgICAgIGNvbXBvbmVudC5pbnB1dHMgPSByZWdGb3Jtc1tmb3JtTmFtZV0uaW5wdXRzO1xuXHQgICAgICAgICAgICAgICAgY29tcG9uZW50LmNoaWxkSWQgPSByZWdGb3Jtc1tmb3JtTmFtZV0uY2hpbGRJZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZWdGb3Jtc1tmb3JtTmFtZV0gPSBjb21wb25lbnQ7XG5cdCAgICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY29tcG9uZW50LmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChjaGlsZC5wcm9wcy5yZWdGb3JtICE9PSB1bmRlZmluZWQgJiYgY2hpbGQucHJvcHMucmVnRm9ybSAhPT0gZm9ybU5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRzIGFyZSByZWdpc3RlcmVkIHRvIGFub3RoZXIgZm9ybVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBjb21wb25lbnQucmVnaXN0ZXIoY2hpbGQpO1xuXHQgICAgICAgICAgICAgICAgY2hpbGQuaXNJbml0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gZWxlbWVudHMgaW4gZm9ybVxuXHQgICAgICAgICAgICB2YXIgcmVnVG9Gb3JtTmFtZTtcblx0ICAgICAgICAgICAgLy8gaWYgKCF0aGlzLnZhbGlkYXRvciB8fCAhdGhpcy52YWxpZGF0b3IuY2FsbCkge1xuXHQgICAgICAgICAgICAvLyAgICB0aHJvdyBuZXcgRXJyb3IoJ3Nob3VsZCBpbXBsZW1lbnQgYGZvY3VzYCBhbmQgYHZhbGlkYXRvcmAgZnVuY3Rpb24nKTtcblx0ICAgICAgICAgICAgLy8gfVxuXHQgICAgICAgICAgICByZWdUb0Zvcm1OYW1lID0gY29tcG9uZW50LnByb3BzLnJlZ0Zvcm0gPyBjb21wb25lbnQucHJvcHMucmVnRm9ybSA6IGRlZmF1bHRGb3JtO1xuXHQgICAgICAgICAgICBpZiAocmVnRm9ybXNbcmVnVG9Gb3JtTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgcmVnRm9ybXNbcmVnVG9Gb3JtTmFtZV0gPSBtb2NrRm9ybSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJlZ0Zvcm1zW3JlZ1RvRm9ybU5hbWVdLnJlZ2lzdGVyKGNvbXBvbmVudCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNvbXBvbmVudC5pc0luaXQgPSB0cnVlO1xuXHQgICAgfSxcblx0ICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0ICAgICAgICB2YXIgY29tcG9uZW50ID0gdGhpcztcblx0ICAgICAgICBpZiAoIWNvbXBvbmVudC5pc0luaXQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGNvbXBvbmVudC5pc0Zvcm0pIHtcblx0ICAgICAgICAgICAgLy8gZm9ybVxuXHQgICAgICAgICAgICAvLyBmb3JtIG9iamVjdFxuXHQgICAgICAgICAgICB2YXIgZm9ybU5hbWUgPSBjb21wb25lbnQucHJvcHMubmFtZSA/IGNvbXBvbmVudC5wcm9wcy5uYW1lIDogZGVmYXVsdEZvcm07XG5cdCAgICAgICAgICAgIGRlbGV0ZSByZWdGb3Jtc1tmb3JtTmFtZV07XG5cdCAgICAgICAgICAgIGNvbXBvbmVudC5pc0luaXQgPSBmYWxzZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyBlbGVtZW50cyBpbiBmb3JtXG5cdCAgICAgICAgICAgIHZhciByZWdUb0Zvcm1OYW1lID0gY29tcG9uZW50LnByb3BzLnJlZ0Zvcm0gPyBjb21wb25lbnQucHJvcHMucmVnRm9ybSA6IGRlZmF1bHRGb3JtO1xuXHQgICAgICAgICAgICByZWdGb3Jtc1tyZWdUb0Zvcm1OYW1lXSA/IHJlZ0Zvcm1zW3JlZ1RvRm9ybU5hbWVdLnVucmVnaXN0ZXIoY29tcG9uZW50KSA6IHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHQgICAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIF92YWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHRoaXMuc3RhdGUuX2Zvcm1WYWx1ZSxcblx0ICAgICAgICAgICAgdmFsaWRhdG9ycyA9IHRoaXMuZ2V0VmFsaWRhdG9ycygpLFxuXHQgICAgICAgICAgICBmb3Jtc3lFeEVycm9yTXNncyxcblx0ICAgICAgICAgICAgaXNDb250aW51ZSA9IHRydWUsXG5cdCAgICAgICAgICAgIHJlcztcblx0ICAgICAgICB2YWxpZGF0b3JzICYmIChmb3Jtc3lFeEVycm9yTXNncyA9IF8ubWFwKHZhbGlkYXRvcnMsIGZ1bmN0aW9uICh2YWxpZGF0b3IpIHtcblx0ICAgICAgICAgICAgaWYgKGlzQ29udGludWUgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmVzID0gdmFsaWRhdG9yKF92YWx1ZSkgfHwge307XG5cdCAgICAgICAgICAgIGlmIChyZXNbJ2NvbnRpbnVlJ10gPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICBpc0NvbnRpbnVlID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHJlcy5yZXMgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVzLm1zZztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gJyc7XG5cdCAgICAgICAgfSkpO1xuXHQgICAgICAgIGZvcm1zeUV4RXJyb3JNc2dzID0gXy5maWx0ZXIoZm9ybXN5RXhFcnJvck1zZ3MsIGZ1bmN0aW9uIChmb3Jtc3lFeEVycm9yTXNnKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlICYmIGZvcm1zeUV4RXJyb3JNc2c7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICAgIF9mb3JtVmFsdWU6IF92YWx1ZSxcblx0ICAgICAgICAgICAgX2Zvcm1zeUV4RXJyb3JNc2dzOiBmb3Jtc3lFeEVycm9yTXNnc1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiBmb3Jtc3lFeEVycm9yTXNncy5sZW5ndGggPT09IDA7XG5cdCAgICB9LFxuXHQgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9mb3JtVmFsdWU7XG5cdCAgICB9LFxuXHQgICAgZ2V0RXJyb3JNc2c6IGZ1bmN0aW9uIGdldEVycm9yTXNnKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9mb3Jtc3lFeEVycm9yTXNncy5sZW5ndGggPT09IDEgPyB0aGlzLnN0YXRlLl9mb3Jtc3lFeEVycm9yTXNnc1swXSA6IHRoaXMuc3RhdGUuX2Zvcm1zeUV4RXJyb3JNc2dzO1xuXHQgICAgfSxcblx0ICAgIGdldFZhbGlkYXRvcnM6IGZ1bmN0aW9uIGdldFZhbGlkYXRvcnMoKSB7XG5cdCAgICAgICAgdmFyIHByb3BlcnR5VmFsaWRhdG9yID0gdGhpcy52YWxpZGF0b3JzICYmIHRoaXMudmFsaWRhdG9ycy5jYWxsID8gW3RoaXMudmFsaWRhdG9yc10gOiB0aGlzLnZhbGlkYXRvcnMgfHwgW10sXG5cdCAgICAgICAgICAgIHZhbGlkYXRvcnMgPSBwcm9wZXJ0eVZhbGlkYXRvci5jb25jYXQodGhpcy5wcm9wcy52YWxpZGF0b3JzIHx8IFtdKTtcblx0ICAgICAgICByZXR1cm4gdmFsaWRhdG9ycztcblx0ICAgIH1cblx0fTtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLFxuXHQgICAgXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICBpc0Zvcm06IHRydWUsXG5cdCAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGNoaWxkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy5pbnB1dHMgfHwge307XG5cdCAgICAgICAgICAgIHRoaXMuY2hpbGRJZCA9IHRoaXMuY2hpbGRJZCB8fCAwO1xuXHQgICAgICAgICAgICBjaGlsZC5yZWdJZCA9IGNoaWxkLnByb3BzLm5hbWUgfHwgdGhpcy5jaGlsZElkKys7XG5cdCAgICAgICAgICAgIHRoaXMuaW5wdXRzW2NoaWxkLnJlZ0lkXSA9IGNoaWxkO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgdW5yZWdpc3RlcjogZnVuY3Rpb24gdW5yZWdpc3RlcihjaGlsZCkge1xuXHQgICAgICAgICAgICBkZWxldGUgdGhpcy5pbnB1dHNbY2hpbGQucmVnSWRdO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc3VibWl0OiBmdW5jdGlvbiBzdWJtaXQoZXZlbnQpIHtcblx0ICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgfHwgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAgICAgdmFyIGZpcnN0RXJyb3JDb21wb25lbnQgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIF8uZWFjaCh0aGlzLmlucHV0cywgZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJlcyA9IGNvbXBvbmVudC52YWxpZGF0ZSgpO1xuXHQgICAgICAgICAgICAgICAgZmlyc3RFcnJvckNvbXBvbmVudCA9IGZpcnN0RXJyb3JDb21wb25lbnQgPT09IHVuZGVmaW5lZCAmJiByZXMgPT09IGZhbHNlID8gY29tcG9uZW50IDogZmlyc3RFcnJvckNvbXBvbmVudDtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGZpcnN0RXJyb3JDb21wb25lbnQgPT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMub25TdWJtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGZpcnN0RXJyb3JDb21wb25lbnQuZm9jdXMgJiYgZmlyc3RFcnJvckNvbXBvbmVudC5mb2N1cygpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2Zvcm0nLFxuXHQgICAgICAgICAgICAgICAgeyBvblN1Ym1pdDogdGhpcy5zdWJtaXQsIHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lIH0sXG5cdCAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fTtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzRfXztcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsndXNlIHN0cmljdCc7XG5cdHZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7IGRpc3BsYXlOYW1lOiAnbW9kdWxlLmV4cG9ydHMnLFxuXHQgICAgbWl4aW5zOiBbX193ZWJwYWNrX3JlcXVpcmVfXygyKV0sXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICB2YXIgZXJyb3JNc2cgPSB0aGlzLmdldEVycm9yTXNnKCk7XG5cdCAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHRoaXMucHJvcHMuc3R5bGUgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbiwgUmVhY3QuY3JlYXRlRWxlbWVudCgnbGFiZWwnLCB7IHN0eWxlOiB7IGNvbG9yOiAncmVkJyB9IH0sIGVycm9yTXNnLCBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgcmVmOiAnZm9jdXMnLCBzdHlsZTogeyBvcGFjaXR5OiAnMCcgfSB9KSkpO1xuXHQgICAgfVxuXHR9KTtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKVxuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgeyd1c2Ugc3RyaWN0Jztcblx0dmFyIFJlYWN0ID0gZ2xvYmFsLlJlYWN0IHx8IF9fd2VicGFja19yZXF1aXJlX18oMSksXG5cdCAgICBmb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSgpO1xuXHRcblx0Zm9ybVsnbWl4aW5zJ10gPSBbX193ZWJwYWNrX3JlcXVpcmVfXygyKV07XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3MoZm9ybSk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGZvcm1zeUV4LXJlYWN0LmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCAwYzk5OGM4NTJhNDJlMGEyY2UyZlxuICoqLyIsInZhciBGb3Jtc3lFeCA9IHt9LFxuICAgIEZvcm0gPSByZXF1aXJlKCcuL0Zvcm0uanN4JyksXG4gICAgQmxvY2sgPSByZXF1aXJlKCcuL0Jsb2NrLmpzeCcpLFxuICAgIE1peGluID0gcmVxdWlyZSgnLi9NaXhpbi5qcycpO1xuXG5Gb3Jtc3lFeC5NaXhpbiA9IE1peGluO1xuRm9ybXN5RXguRm9ybSA9IEZvcm07XG5Gb3Jtc3lFeC5CbG9jayA9IEJsb2NrO1xuXG5pZiAoIWdsb2JhbC5leHBvcnRzICYmICFnbG9iYWwubW9kdWxlICYmICghZ2xvYmFsLmRlZmluZSB8fCAhZ2xvYmFsLmRlZmluZS5hbWQpKSB7XG4gIGdsb2JhbC5Gb3Jtc3lFeCA9IEZvcm1zeUV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1zeUV4O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9saWIvbWFpbi5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8xX187XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcInJlYWN0XCJcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgUmVhY3QgPSBnbG9iYWwuUmVhY3QgfHwgcmVxdWlyZSgncmVhY3QnKSxcbiAgICBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpLFxuICAgIHJlZ0Zvcm1zID0ge30sXG4gICAgbW9ja0Zvcm0gPSByZXF1aXJlKCcuL2Zvcm0nKSxcbiAgICBkZWZhdWx0Rm9ybSA9ICdfREVGQVVMVF9GT1JNJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaWYgKCF0aGlzLnJlZnMuZm9jdXMpIHtcbiAgICAgICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKCdzaG91bGQgaGF2ZSBhIGNoaWxkIGNvbXBvbmVudCB3aXRoIHJlZiBuYW1lIGBpbnB1dGAsIG1vc3Qgb2YgdGhlIGNhc2UgcmVmIGlzIHNldCBvbiBFcnJvck1zZ0xhYmVsJyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmZvY3VzKSAmJlxuICAgICAgICAgICAgUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmZvY3VzKS5mb2N1cygpO1xuICAgIH0sXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfZm9ybXN5RXhWYWx1ZTogJycsXG4gICAgICAgICAgICBfZm9ybXN5RXhFcnJvck1zZ3M6IFtdXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRoaXM7XG4gICAgICAgIGlmIChjb21wb25lbnQuaXNJbml0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wb25lbnQuaXNGb3JtKSB7IC8vIGZvcm1cbiAgICAgICAgICAgIC8vIGZvcm0gb2JqZWN0XG4gICAgICAgICAgICB2YXIgZm9ybU5hbWUgPSBjb21wb25lbnQucHJvcHMubmFtZSA/IGNvbXBvbmVudC5wcm9wcy5uYW1lIDogZGVmYXVsdEZvcm07XG4gICAgICAgICAgICBpZiAocmVnRm9ybXNbZm9ybU5hbWVdKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmlucHV0cyA9IHJlZ0Zvcm1zW2Zvcm1OYW1lXS5pbnB1dHM7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmNoaWxkSWQgPSByZWdGb3Jtc1tmb3JtTmFtZV0uY2hpbGRJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ0Zvcm1zW2Zvcm1OYW1lXSA9IGNvbXBvbmVudDtcbiAgICAgICAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5wcm9wcy5yZWdGb3JtICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnByb3BzLnJlZ0Zvcm0gIT09IGZvcm1OYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50cyBhcmUgcmVnaXN0ZXJlZCB0byBhbm90aGVyIGZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LnJlZ2lzdGVyKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuaXNJbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBlbGVtZW50cyBpbiBmb3JtXG4gICAgICAgICAgICB2YXIgcmVnVG9Gb3JtTmFtZTtcbiAgICAgICAgICAgIC8vIGlmICghdGhpcy52YWxpZGF0b3IgfHwgIXRoaXMudmFsaWRhdG9yLmNhbGwpIHtcbiAgICAgICAgICAgIC8vICAgIHRocm93IG5ldyBFcnJvcignc2hvdWxkIGltcGxlbWVudCBgZm9jdXNgIGFuZCBgdmFsaWRhdG9yYCBmdW5jdGlvbicpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgcmVnVG9Gb3JtTmFtZSA9IGNvbXBvbmVudC5wcm9wcy5yZWdGb3JtID8gY29tcG9uZW50LnByb3BzLnJlZ0Zvcm0gOiBkZWZhdWx0Rm9ybTtcbiAgICAgICAgICAgIGlmIChyZWdGb3Jtc1tyZWdUb0Zvcm1OYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVnRm9ybXNbcmVnVG9Gb3JtTmFtZV0gPSBtb2NrRm9ybSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVnRm9ybXNbcmVnVG9Gb3JtTmFtZV0ucmVnaXN0ZXIoY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQuaXNJbml0ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzO1xuICAgICAgICBpZiAoIWNvbXBvbmVudC5pc0luaXQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBvbmVudC5pc0Zvcm0pIHsgLy8gZm9ybVxuICAgICAgICAgICAgLy8gZm9ybSBvYmplY3RcbiAgICAgICAgICAgIHZhciBmb3JtTmFtZSA9IGNvbXBvbmVudC5wcm9wcy5uYW1lID8gY29tcG9uZW50LnByb3BzLm5hbWUgOiBkZWZhdWx0Rm9ybTtcbiAgICAgICAgICAgIGRlbGV0ZSByZWdGb3Jtc1tmb3JtTmFtZV07XG4gICAgICAgICAgICBjb21wb25lbnQuaXNJbml0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIGVsZW1lbnRzIGluIGZvcm1cbiAgICAgICAgICAgIHZhciByZWdUb0Zvcm1OYW1lID0gY29tcG9uZW50LnByb3BzLnJlZ0Zvcm0gPyBjb21wb25lbnQucHJvcHMucmVnRm9ybSA6IGRlZmF1bHRGb3JtO1xuICAgICAgICAgICAgcmVnRm9ybXNbcmVnVG9Gb3JtTmFtZV0gPyAocmVnRm9ybXNbcmVnVG9Gb3JtTmFtZV0udW5yZWdpc3Rlcihjb21wb25lbnQpKSA6IHVuZGVmaW5lZCA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHRoaXMuc3RhdGUuX2Zvcm1WYWx1ZSxcbiAgICAgICAgICAgIHZhbGlkYXRvcnMgPSB0aGlzLmdldFZhbGlkYXRvcnMoKSxcbiAgICAgICAgICAgIGZvcm1zeUV4RXJyb3JNc2dzLFxuICAgICAgICAgICAgaXNDb250aW51ZSA9IHRydWUsXG4gICAgICAgICAgICByZXM7XG4gICAgICAgIHZhbGlkYXRvcnMgJiZcbiAgICAgICAgICAgIChmb3Jtc3lFeEVycm9yTXNncyA9IF8ubWFwKHZhbGlkYXRvcnMsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDb250aW51ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXMgPSB2YWxpZGF0b3IoX3ZhbHVlKSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5jb250aW51ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29udGludWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMubXNnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApKTtcbiAgICAgICAgZm9ybXN5RXhFcnJvck1zZ3MgPSBfLmZpbHRlcihcbiAgICAgICAgICAgIGZvcm1zeUV4RXJyb3JNc2dzLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGZvcm1zeUV4RXJyb3JNc2cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZSAmJiBmb3Jtc3lFeEVycm9yTXNnO1xuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2Zvcm1WYWx1ZTogX3ZhbHVlLFxuICAgICAgICAgICAgICAgIF9mb3Jtc3lFeEVycm9yTXNnczogZm9ybXN5RXhFcnJvck1zZ3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZvcm1zeUV4RXJyb3JNc2dzLmxlbmd0aCA9PT0gMDtcbiAgICB9LFxuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9mb3JtVmFsdWU7XG4gICAgfSxcbiAgICBnZXRFcnJvck1zZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5fZm9ybXN5RXhFcnJvck1zZ3MubGVuZ3RoID09PSAxID9cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLl9mb3Jtc3lFeEVycm9yTXNnc1swXSA6IHRoaXMuc3RhdGUuX2Zvcm1zeUV4RXJyb3JNc2dzO1xuICAgIH0sXG4gICAgZ2V0VmFsaWRhdG9yczogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvcGVydHlWYWxpZGF0b3IgPSAgdGhpcy52YWxpZGF0b3JzICYmIHRoaXMudmFsaWRhdG9ycy5jYWxsID9cbiAgICAgICAgICAgIFt0aGlzLnZhbGlkYXRvcnNdIDpcbiAgICAgICAgICAgICh0aGlzLnZhbGlkYXRvcnMgfHwgW10pLFxuICAgICAgICAgICAgdmFsaWRhdG9ycyA9IHByb3BlcnR5VmFsaWRhdG9yLmNvbmNhdCh0aGlzLnByb3BzLnZhbGlkYXRvcnMgfHwgW10pO1xuICAgICAgICByZXR1cm4gdmFsaWRhdG9ycztcbiAgICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9NaXhpbi5qc1xuICoqLyIsInZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCByZXF1aXJlKCdyZWFjdCcpLFxuICAgIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc0Zvcm06IHRydWUsXG4gICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy5pbnB1dHMgfHwge307XG4gICAgICAgICAgICB0aGlzLmNoaWxkSWQgPSB0aGlzLmNoaWxkSWQgfHwgMDtcbiAgICAgICAgICAgIGNoaWxkLnJlZ0lkID0gY2hpbGQucHJvcHMubmFtZSB8fCB0aGlzLmNoaWxkSWQrKztcbiAgICAgICAgICAgIHRoaXMuaW5wdXRzW2NoaWxkLnJlZ0lkXSA9IGNoaWxkO1xuICAgICAgICB9LFxuICAgICAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmlucHV0c1tjaGlsZC5yZWdJZF07XG4gICAgICAgIH0sXG4gICAgICAgIHN1Ym1pdDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKSB8fCBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIGZpcnN0RXJyb3JDb21wb25lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBfLmVhY2goXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dHMsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBjb21wb25lbnQudmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RXJyb3JDb21wb25lbnQgPSAoZmlyc3RFcnJvckNvbXBvbmVudCA9PT0gdW5kZWZpbmVkICYmIHJlcyA9PT0gZmFsc2UpID8gY29tcG9uZW50OiBmaXJzdEVycm9yQ29tcG9uZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZpcnN0RXJyb3JDb21wb25lbnQgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vblN1Ym1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDpcbiAgICAgICAgICAgICAgICBmaXJzdEVycm9yQ29tcG9uZW50LmZvY3VzICYmIGZpcnN0RXJyb3JDb21wb25lbnQuZm9jdXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLnN1Ym1pdH0gc3R5bGU9e3RoaXMucHJvcHMuc3R5bGV9IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2xpYi9mb3JtLmpzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzRfXztcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIGV4dGVybmFsIFwidW5kZXJzY29yZVwiXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFJlYWN0ID0gZ2xvYmFsLlJlYWN0IHx8IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiBcIm1vZHVsZS5leHBvcnRzXCIsXG4gICAgbWl4aW5zOiBbXG4gICAgICAgcmVxdWlyZSgnLi9NaXhpbicpXG4gICAgXSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVycm9yTXNnID0gdGhpcy5nZXRFcnJvck1zZygpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7c3R5bGU6IHRoaXMucHJvcHMuc3R5bGV9LCBcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuLCBcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge3N0eWxlOiB7Y29sb3I6ICdyZWQnfX0sIGVycm9yTXNnLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge3JlZjogXCJmb2N1c1wiLCBzdHlsZToge29wYWNpdHk6ICcwJ319KSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG59KTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vbGliL0Jsb2NrLmpzeFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCByZXF1aXJlKCdyZWFjdCcpLFxuICAgIGZvcm0gPSByZXF1aXJlKCcuL2Zvcm0nKSgpO1xuXG5mb3JtWydtaXhpbnMnXSA9IFtyZXF1aXJlKCcuL01peGluJyldO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyhmb3JtKTtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9saWIvRm9ybS5qc3hcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9